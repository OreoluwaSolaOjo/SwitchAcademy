// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwitchAcademy.Persistence.Models;

#nullable disable

namespace SwitchAcademy.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221119060221_first migration")]
    partial class firstmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"), 1L, 1);

                    b.Property<string>("AssignmentGithubLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignmentGoogleDriveLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Others")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingTrackId")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId");

                    b.HasIndex("TrainingTrackId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<string>("NotificationContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingTrackId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("TrainingTrackId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.QuestionsBank", b =>
                {
                    b.Property<int>("QuestionsBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionsBankId"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("TrainingTrackId")
                        .HasColumnType("int");

                    b.Property<string>("option1")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("option2")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("option3")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("option4")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QuestionsBankId");

                    b.HasIndex("TrainingTrackId");

                    b.ToTable("QuestionsBanks");
                });

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.TrainingTrack", b =>
                {
                    b.Property<int>("TrainingTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingTrackId"), 1L, 1);

                    b.Property<string>("TrainingTrackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingTrackId");

                    b.ToTable("TrainingTracks");
                });

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompletedNysc")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExperienced")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("TimeTaken")
                        .HasColumnType("int");

                    b.Property<int>("TrainingTrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingTrackId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.Assignment", b =>
                {
                    b.HasOne("SwitchAcademy.Persistence.Models.TrainingTrack", "TrainingTracks")
                        .WithMany("Assignments")
                        .HasForeignKey("TrainingTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingTracks");
                });

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.Notification", b =>
                {
                    b.HasOne("SwitchAcademy.Persistence.Models.TrainingTrack", "TrainingTracks")
                        .WithMany("Notifications")
                        .HasForeignKey("TrainingTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingTracks");
                });

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.QuestionsBank", b =>
                {
                    b.HasOne("SwitchAcademy.Persistence.Models.TrainingTrack", "TrainingTracks")
                        .WithMany("QuestionsBanks")
                        .HasForeignKey("TrainingTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingTracks");
                });

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.User", b =>
                {
                    b.HasOne("SwitchAcademy.Persistence.Models.TrainingTrack", "TrainingTracks")
                        .WithMany("Users")
                        .HasForeignKey("TrainingTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingTracks");
                });

            modelBuilder.Entity("SwitchAcademy.Persistence.Models.TrainingTrack", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Notifications");

                    b.Navigation("QuestionsBanks");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
